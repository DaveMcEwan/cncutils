#!/usr/bin/env python
# Everything is always in millimeters, not stupid imperial!
# Jog machine to desired location then run the output generated by this script.

from gcode_profile_circle import *

if __name__ == '__main__':
    import argparse
    
    parser = argparse.ArgumentParser()
    
    parser.add_argument('--diameter',
                        action='store',
                        default=10.0,
                        type=float,
                        help='hole diameter (mm)')
    
    parser.add_argument('--depth',
                        action='store',
                        default=8.0,
                        type=float,
                        help='hole depth (mm)')
    
    parser.add_argument('--pitch',
                        action='store',
                        default=2.0,
                        type=float,
                        help='helix pitch (mm)')
    
    parser.add_argument('--feedrate',
                        action='store',
                        default=500.0,
                        type=float,
                        help='feedrate (mm/minute)')
    
    parser.add_argument('--endmill',
                        action='store',
                        default=3.0,
                        type=float,
                        help='endmill diameter (mm, cylindrical)')
    
    parser.add_argument('--direction',
                        action='store',
                        default='cw',
                        choices=['cw', 'ccw'],
                        help='helix direction (cw or ccw)')
    
    parser.add_argument('--roughing',
                        action='store',
                        default=0.0,
                        type=float,
                        help='roughing thickness (mm)')

    args = parser.parse_args()
    
    # Initialise gcode lines.
    g = []
    
    # Set units as millimeters.
    g.append('G21')
    
    # Use relative positioning (as opposed to absolute).
    g.append('G91')
    
    offset = args.endmill/2
    if args.direction == 'ccw':
        offset = offset * -1
    
    g.append(profile_circle_rel(
                                diameter=args.diameter,
                                depth=args.depth,
                                pitch=args.pitch,
                                feedrate=args.feedrate,
                                offset=offset,
                                direction=args.direction,
                                roughing=args.roughing,
                               ))
    print('\n'.join(g))
